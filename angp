#!/usr/bin/env bash
version="v0.5.1"

main() {
	echo "ANGP $version -GPL v3
Usage: angp [OPTION]
try 'angp -h' for more information."
}

angp_help() {
	echo "ANGP(Aircrack-NG Prompt) $version -GPL v3
Usage: angp [OPTION]

	-h, --help > shows help/info
	start > starts the prompts

Author: Spencer Bravo <spencer@codeshrub.com>"
}

resource_check() {

	resources=("aircrack-ng" "airmon-ng" "airodump-ng")
	for app in "${resources[@]}"; do
		#checks whether each app is present on the machine
		check="$(which $app)"
		if [[ $check == "" ]]; then
			#app is not present
			echo $app "is gone"
			$app"_check"="gone"
			install_required="yes"
		fi
	done
	if [[ $install_required == "yes" ]]; then
		echo "The aircrack-ng suite is necessary to use this tool, you can get it from https://github.com/aircrack-ng/aircrack-ng";
	fi

}

airmon() {

	#make sure files that will be used don't already exist
	rm -rf "/tmp/devices.txt"
	rm -rf "/tmp/count.txt"
	rm -rf "/tmp/dev_on.txt"

	#set vars for text files so I don't need to write their names a ton
	#also gives ability to change them with ease
	dev_file="/tmp/devices.txt"
	count_file="/tmp/count.txt"

	sudo airmon-ng >> "$dev_file"
	#counts number of lines in airmon-ng output
	wc -l "$dev_file" >> "$count_file"
	#last declared so it knows when to stop looking at lines(in while loop below)
	last=$(cat "$count_file" | awk '{print $1}')

	#number of lines before first device or airmon-ng
	#set it as first dev and then ++ to go to next dev
	dev=5
	while [[ $dev != $last ]]; do 
		let "num = $dev - 4"
		#individual device for list to choose from
		ind_device=$(cat "$dev_file" | sed -n $dev"p")
		echo $num") "$ind_device
		let "dev=$dev + 1"
	done

	read -p "Type the number that coorisponds to the device you want to use[1]" dev_choice

	if [[ $dev_choice == "" ]]; then
		dev_choice="1"
	fi

	let "true_dev= $dev_choice + 4"
	name_dev=$(cat "$dev_file" | sed -n $true_dev"p" | awk '{print $1}')
	
	if [[ $name_dev == "" ]]; then
		echo "That device does not exist"
	else
		#start monitor mode on device selected
		sudo airmon-ng start $name_dev >> "/tmp/dev_on.txt"
	fi
	
	monitor_device=$(cat "/tmp/dev_on.txt" | grep '(monitor mode enabled on ' | awk '{print $5}' | cut -b-4)

	echo $monitor_device


}

airodump() {

	read -p "This tool will scan networks around you. are you sure you want to do this?([y]/n)" scan_confirm
	if [[ $scan_confirm == y || $scan_confirm == "" ]]; then

		sudo screen -AdmS airodump airodump-ng --output-format csv --write /tmp/scan $monitor_device


		sudo rm -rf /tmp/scan*
	fi


	
}

prompt() {

	resource_check

	unset resources
	unset install_required

	airmon

	rm -rf "/tmp/devices.txt"
	rm -rf "/tmp/count.txt"
	rm -rf "/tmp/dev_on.txt"
	
	unset dev
	unset last
	unset num
	unset ind_device
	unset dev_file
	unset true_dev
	unset dev_choice
	unset name_dev
	
	airodump

	sudo airmon-ng stop $monitor_device >> "/tmp/stopdev.txt"
	rm -rf "/tmp/stopdev.txt"
	unset scan_confirm
	
}

case "$1" in
	-h|--help)
		angp_help
	;;
	start)
		prompt
	;;
	*)
		main
	;;
esac

